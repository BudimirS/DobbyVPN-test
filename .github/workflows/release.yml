name: Release

# Configures this workflow to run every time a change is pushed to the master.
on:
  push:
    branches:
      - main
    tags:
      - "v*"

jobs:
  prepare_go_client_android:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'

      - name: Vendor Cloak/internal
        run: |
          git clone --depth 1 https://github.com/cbeuw/Cloak tmp
          mkdir -p go_client/modules/Cloak
          cp -r tmp/internal go_client/modules/Cloak/
          rm -rf tmp

      - name: Download Go modules
        run: |
          cd go_client
          go mod download
          cd ..

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          packages: >
            platforms;android-35
            build-tools;35.0.0
            platform-tools

      - name: Install gomobile & init
        run: |
          go install golang.org/x/mobile/cmd/gomobile@latest
          gomobile init     

      - name: Fetch gomobile runtime
        run: |
          cd go_client            
          go get golang.org/x/mobile/bind@latest
          cd ..

      - name: Build Go AAR
        run: |
          cd go_client
          gomobile bind -target=android -androidapi=26 -o ../go_client_android.aar ./kotlin_exports
          cd ..

      - name: Upload Go AAR
        uses: actions/upload-artifact@master
        with:
          name: go_client_android.aar
          path: go_client_android.aar

  android_build:
    needs: prepare_go_client_android
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.23.2"]

    steps:
      - uses: actions/checkout@v4

      - name: Download Go AAR
        uses: actions/download-artifact@master
        with:
          name: go_client_android.aar
          path: ck-android/CkClient/libs

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22.x"

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Set up Git Submodules
        run: |
          git submodule update --init --recursive

      - name: Install dependencies
        run: |
          cd src
          go get ./...
          cd ..
          sudo apt-get install golang gcc libgl1-mesa-dev xorg-dev
          sudo apt-get install gcc-multilib
          sudo apt-get install gcc-mingw-w64

      - name: Android build
        run: |
          cd ck-android/CkClient
          chmod +x gradlew
          ./gradlew assembleDebug
          cd ../..
          cp ck-android/CkClient/app/build/outputs/apk/debug/app-debug.apk dobbyvpn-android.apk

      - name: Upload Android client
        uses: actions/upload-artifact@master
        with:
          name: dobbyvpn-android.apk
          path: dobbyvpn-android.apk

  ios_build:
    runs-on: macos-latest
    strategy:
      matrix:
        go-version: [ "1.23.2" ]

    steps:
      - name: Checkout node
        uses: actions/checkout@v2

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22.x"

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Select Xcode 16.1
        run: sudo xcode-select -s /Applications/Xcode_16.1.app

      - name: Set up Git Submodules
        run: |
          git submodule update --init --recursive

      - name: Install dependencies
        run: |
          cd src
          go get ./...
          cd ..

      - name: Build Kotlin Multiplatform
        run: |
          cd ck-android/CkClient
          chmod +x gradlew
          ./gradlew linkReleaseFrameworkIosArm64

      - name: Build iOS App
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          CERT_P12_PASSWORD: ${{ secrets.CERT_P12_PASSWORD }}
          CERT_P12_BASE64: ${{ secrets.CERT_P12_BASE64 }}
          PROVISION_DOBBY_BASE64: ${{ secrets.PROVISION_DOBBY_BASE64 }}
          PROVISION_DOBBY_TUNNEL_BASE64: ${{ secrets.PROVISION_DOBBY_TUNNEL_BASE64 }}
        run: |
          set -euo pipefail

          # Prepare paths
          CERT_PATH="$RUNNER_TEMP/cert.p12"
          PROVISION_DOBBY_PATH="$RUNNER_TEMP/profile1.mobileprovision"
          PROVISION_DOBBY_TUNNEL_PATH="$RUNNER_TEMP/profile2.mobileprovision"
          KEYCHAIN_PATH="$RUNNER_TEMP/build.keychain"

          # Decode base64 secrets
          echo "$CERT_P12_BASE64" | base64 --decode > "$CERT_PATH"
          echo "$PROVISION_DOBBY_BASE64" | base64 --decode > "$PROVISION_DOBBY_PATH"
          echo "$PROVISION_DOBBY_TUNNEL_BASE64" | base64 --decode > "$PROVISION_DOBBY_TUNNEL_PATH"

          # Setup keychain and import certificate
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security default-keychain -s "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security import "$CERT_PATH" -k "$KEYCHAIN_PATH" -P "$CERT_P12_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          # Install provisioning profiles
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp "$PROVISION_DOBBY_PATH" ~/Library/MobileDevice/Provisioning\ Profiles/
          cp "$PROVISION_DOBBY_TUNNEL_PATH" ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: Verify provisioning profile contents
        run: |
          for profile in ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision; do
            echo "== $profile =="
            security cms -D -i "$profile" | grep network || echo "No Network Extension entitlement"
          done

      - name: List installed provisioning profiles
        run: |
          echo "Listing provisioning profiles in ~/Library/MobileDevice/Provisioning Profiles"
          ls -l ~/Library/MobileDevice/Provisioning\ Profiles
          for profile in ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision; do
            echo "----"
            security cms -D -i "$profile" | plutil -extract Name xml1 -o - - | xmllint --format -
          done

      - name: ðŸ“¦ Build and Archive iOS App
        run: |
          set -euo pipefail
          cd ck-android/CkClient/iosApp
          xcodebuild -project iosApp.xcodeproj \
                     -scheme iosApp \
                     -configuration Release \
                     -sdk iphoneos \
                     -archivePath $PWD/build/iosApp.xcarchive \
                     archive
              ls -lh $PWD/build

              if [ -e "$PWD/build/iosApp.xcarchive" ]; then
                  echo "Archive created successfully!"
              else
                  echo "Archive not found!"
              exit 1
              fi

      - name: Export IPA
        run: |
          cd ck-android/CkClient/iosApp
          cat > exportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store-connect</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>vpn.dobby.app</key>
              <string>DobbyVPNAppStore</string>
              <key>vpn.dobby.app.tunnel</key>
              <string>DobbyVPNTunnelAppStore</string>
            </dict>
            <key>teamID</key>
            <string>F6CHJX72K5</string>
          </dict>
          </plist>
          EOF

          xcodebuild -exportArchive \
                     -archivePath $PWD/build/iosApp.xcarchive \
                     -exportPath $PWD/build/ipa \
                     -exportOptionsPlist exportOptions.plist

      - name: Upload signed .IPA to artifacts
        uses: actions/upload-artifact@master
        with:
          name: DobbyVPN.ipa
          path: ck-android/CkClient/iosApp/build/ipa/*.ipa

#      - name: Publish to TestFlight via FastLane
#        env:
#          APP_STORE_API_KEY: ${{ secrets.APP_STORE_API_KEY }}
#          APP_STORE_KEY_ID: ${{ secrets.APP_STORE_KEY_ID }}
#          APP_STORE_ISSUER_ID: ${{ secrets.APP_STORE_ISSUER_ID }}
#        run: |
#          gem install fastlane
#          echo '{
#          "key_id": "'"$APP_STORE_KEY_ID"'",
#          "issuer_id": "'"$APP_STORE_ISSUER_ID"'",
#          "key": "'"$APP_STORE_API_KEY"'"
#          }' > api_key.json
#
#          fastlane pilot upload \
#            --ipa ck-android/CkClient/iosApp/build/ipa/*.ipa \
#            --api_key_path api_key.json
#          rm -f api_key.json

  desktop_build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          check-latest: true

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: >
            ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', '**/libs.versions.toml') }}

      - name: Build with Gradle
        run: |
          cd ck-android/CkClient
          chmod +x ./gradlew
          ./gradlew build

      - name: Conveyor build site
        uses: hydraulic-software/conveyor/actions/build@v16.0
        env:
          OAUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          command: make site
          extra_flags: "--passphrase=\"${{ secrets.CONVEYOR_PASSPHRASE }}\" -f ck-android/CkClient/conveyor.conf"
          signing_key: ${{ secrets.SIGNING_KEY }}
          agree_to_license: 1

      - name: Display file tree with sizes after Linux build
        run: |
          echo "Displaying the size of files and directories in 'output' directory:"
          du -ah output | sort -rh

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ github.run_number }}"
          release_name: "Release v${{ github.run_number }}"
          draft: false
          prerelease: false

      - name: Upload Debian
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./output/debian/combined-vpn-client_1.0_amd64.deb
          asset_name: combined-vpn-client-linux.deb
          asset_content_type: application/deb

      - name: Upload TarGz
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./output/combined-vpn-client-1.0-linux-amd64.tar.gz
          asset_name: combined-vpn-client-linux.tar.gz
          asset_content_type: application/tar_gz

      - name: Upload MacOS aarch64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./output/combined-vpn-client-1.0-mac-aarch64.zip
          asset_name: combined-vpn-client-mac-aarch64.zip
          asset_content_type: application/mac_aarch64

      - name: Upload MacOS amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./output/combined-vpn-client-1.0-mac-amd64.zip
          asset_name: combined-vpn-client-mac-amd64.zip
          asset_content_type: application/mac_amd64

      - name: Upload Windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./output/combined-vpn-client-1.0.x64.msix
          asset_name: combined-vpn-client-windows.msix
          asset_content_type: application/windows

      - name: Cleanup Conveyor
        if: always()
        run: |
          rm -rf .conveyor/cache/*

      - name: Display file tree with sizes after Windows build
        run: |
          echo "Displaying the size of files and directories in 'output' directory:"
          du -ah output | sort -rh

      - name: Delete output directory
        run: rm -rf output

  release:
    runs-on: ubuntu-latest
    needs: [desktop_build, android_build, ios_build]
    permissions: write-all

    steps:
      - uses: actions/checkout@v2

      - name: Make release dir
        run: mkdir release

      - name: Download linux client
        uses: actions/download-artifact@master
        with:
          name: dobbyvpn-linux-amd64.zip
          path: release
      - name: Download windows client
        uses: actions/download-artifact@master
        with:
          name: dobbyvpn-windows.exe
          path: release
      - name: Download macos client
        uses: actions/download-artifact@master
        with:
          name: dobbyvpn-darwin-arm64
          path: release
      - name: Download android client
        uses: actions/download-artifact@master
        with:
          name: dobbyvpn-android.apk
          path: release

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
